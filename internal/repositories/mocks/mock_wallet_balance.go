// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/interfaces/wallet_balance.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	request "github.com/hakansahinxyz/crypto-tracker-backend/internal/dto/request"
	models "github.com/hakansahinxyz/crypto-tracker-backend/internal/models"
)

// MockWalletBalanceRepository is a mock of WalletBalanceRepository interface.
type MockWalletBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletBalanceRepositoryMockRecorder
}

// MockWalletBalanceRepositoryMockRecorder is the mock recorder for MockWalletBalanceRepository.
type MockWalletBalanceRepositoryMockRecorder struct {
	mock *MockWalletBalanceRepository
}

// NewMockWalletBalanceRepository creates a new mock instance.
func NewMockWalletBalanceRepository(ctrl *gomock.Controller) *MockWalletBalanceRepository {
	mock := &MockWalletBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockWalletBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletBalanceRepository) EXPECT() *MockWalletBalanceRepositoryMockRecorder {
	return m.recorder
}

// GetAllBalances mocks base method.
func (m *MockWalletBalanceRepository) GetAllBalances(ctx context.Context, req request.WalletBalanceRequest) ([]models.WalletBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBalances", ctx, req)
	ret0, _ := ret[0].([]models.WalletBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBalances indicates an expected call of GetAllBalances.
func (mr *MockWalletBalanceRepositoryMockRecorder) GetAllBalances(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBalances", reflect.TypeOf((*MockWalletBalanceRepository)(nil).GetAllBalances), ctx, req)
}
